import { app, BrowserWindow, ipcMain } from "electron";
import { ChildProcess, exec, execFile, spawn } from "child_process";
import squirrel from "electron-squirrel-startup";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (squirrel) {
  app.quit();
}

let child: ChildProcess | undefined;
let server: ChildProcess | undefined;
let serverPid: number | undefined;

const startServer = () => {
  console.log("Starting server...");
  const uvicornArgs = ["--host", "127.0.0.1", "--port", "8154", "server:app"];
  if (isDev()) {
    uvicornArgs.unshift("--reload");
    server = spawn("uvicorn", uvicornArgs);
  } else {
    server = spawn("uvicorn", uvicornArgs);
  }
  server.on("error", (error) => {
    console.error(`Error: ${error.message}`);
  });
  server.stderr?.on("data", (data) => {
    if (data.includes("Started server process")) {
      // Extract the PID from the log message, e.g. "...[1234]..."
      const pidRegex = /\[(\d+)\]/;
      const match = data.toString().match(pidRegex);
      if (match) {
        const pid = match[1];
        serverPid = parseInt(pid);
        console.log(`Server process started with PID ${pid}`);
      }
    }
  });
  server.stdout?.on("data", (data) => {
    console.log(`stdout: ${data}`);
  });
};

const createWindow = () => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
  return mainWindow;
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", () => {
  const mainWindow = createWindow();
  startServer();

  // IPC communication between main and renderer processes
  // Python
  ipcMain.on("python:start", () => {
    console.log("Starting Python process...");
    const execCallback = (
      error: Error | null,
      stdout: string,
      stderr: string,
    ) => {
      if (error) {
        console.error(`Error: ${error.message}`);
        mainWindow.webContents.send("python:stdout", error.message);
        return;
      }
      if (stderr) {
        console.error(`stderr: ${stderr}`);
        mainWindow.webContents.send("python:stdout", stderr);
        return;
      }
      console.log(`stdout: ${stdout}`);
    };
    if (isDev()) child = exec(`python -u main.py`, execCallback);
    else {
      child = execFile("./python/main.exe", ["-u"], execCallback);
    }
    child.stdout?.on("data", (data) => {
      console.log(`stdout: ${data}`);
      mainWindow.webContents.send("python:stdout", data);
    });
  });
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

app.on("before-quit", () => {
  if (server) {
    console.log("Killing server process...");
    exec(`taskkill /F /PID ${serverPid}`);

    console.log("Killing uvicorn process...");
    if (!server.kill()) {
      console.error("Failed to kill server process.");
    }
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

declare global {
  interface Window {
    python: {
      start: () => void;
      onStdout: (listener: (data: string) => void) => void;
    };
  }
}

const isDev = () => {
  return process.env["WEBPACK_SERVE"] === "true";
};
