import { app, BrowserWindow, ipcMain, net } from "electron";
import { ChildProcess, exec } from "child_process";
import squirrel from "electron-squirrel-startup";
import fs from "fs";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (squirrel) {
  app.quit();
}

let server: ChildProcess | undefined;
let serverPid: number | undefined;
let reloaderPid: number | undefined;
let installerProcess: ChildProcess | undefined;

const installRequirements = async () => {
  console.log("Installing requirements...");
  const requirementsPath = "requirements.txt";
  return new Promise<void>((resolve, reject) => {
    installerProcess = exec(
      `python3 -m pip install -r ${requirementsPath}`,
      (error, stdout, stderr) => {
        if (error) {
          console.error(`Error: ${error.message}`);
          reject(error);
          return;
        }
        if (stderr) {
          console.log(stderr);
        }
        console.log(stdout);
        resolve();
      },
    );
    console.log(`Installer PID: ${installerProcess.pid}`);
  });
};

const parsePid = (data: string) => {
  // Extract the PID from the log message, e.g. "...[1234]..."
  const pidRegex = /\[(\d+)\]/;
  const match = data.toString().match(pidRegex);
  if (match) {
    return parseInt(match[1]);
  }
  return undefined;
};

const startServer = () => {
  console.log("Starting server...");
  if (isDev()) {
    server = exec(
      "python3 -m uvicorn --reload src.python.server:app --host 127.0.0.1 --port 8154",
    );
  } else {
    server = exec(
      "python3 -m uvicorn python.server:app --host 127.0.0.1 --port 8154",
    );
  }
  server.on("error", (error) => {
    console.log(`Error: ${error.message}`);
    console.error(`Error: ${error.message}`);
  });
  server.stderr?.on("data", (data) => {
    if (data.includes("Started server process")) {
      serverPid = parsePid(data.toString());
      console.log(`Server PID: ${serverPid}`);
    }
    if (data.includes("Started reloader process")) {
      reloaderPid = parsePid(data.toString());
      console.log(`Reloader PID: ${reloaderPid}`);
    }
    console.log(`stderr: ${data}`);
  });
  server.stdout?.on("data", (data) => {
    console.log(`stdout: ${data}`);
  });
};

const createWindow = () => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 768,
    width: 1024,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  return mainWindow;
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", async () => {
  await installRequirements();
  installerProcess?.kill();
  createWindow();
  startServer();

  console.log("App is ready.");

  // IPC communication between main and renderer processes
  ipcMain.handle("python:submitFilePath", async (event, path: string) => {
    console.log({
      path,
    });

    const response = await net.fetch(`http://localhost:8154/file`, {
      method: "put",
      body: JSON.stringify({
        path,
      }),
      headers: {
        "Content-Type": "application/json",
      },
    });
    console.log(response);
  });
  ipcMain.handle("python:readFile", async (event, path: string) => {
    return new Promise<string>((resolve, reject) => {
      fs.readFile(path, "utf-8", (err, data) => {
        if (err) {
          console.error(err);
          reject(err);
          return;
        }
        resolve(data);
      });
    });
  });
  ipcMain.handle(
    "python:setFileSettings",
    async (
      event,
      hasHeader: boolean,
      separator: string,
      selectedColumns: string[],
    ) => {
      console.log({
        hasHeader,
        separator,
        selectedColumns,
      });
      const response = await net.fetch(`http://localhost:8154/file/settings`, {
        method: "put",
        body: JSON.stringify({
          header: hasHeader,
          separator: separator,
          selectedColumns,
        }),
        headers: {
          "Content-Type": "application/json",
        },
      });
      console.log(response);
    },
  );
  ipcMain.handle(
    "python:setAlgorithmSettings",
    async (
      event,
      autoChooseClusters: boolean,
      maxClusters: number,
      excludedWords: string[],
      seed: number,
    ) => {
      console.log({
        autoChooseClusters,
        maxClusters,
        excludedWords,
        seed,
      });
      const response = await net.fetch(
        `http://localhost:8154/algorithm/settings`,
        {
          method: "put",
          body: JSON.stringify({
            auto_choose_clusters: autoChooseClusters,
            max_clusters: maxClusters,
            excluded_words: excludedWords,
            seed,
          }),
          headers: {
            "Content-Type": "application/json",
          },
        },
      );
      console.log(response);
    },
  );
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

app.on("before-quit", () => {
  if (server) {
    if (serverPid) {
      console.log("Killing server process...");
      exec(`taskkill /F /PID ${serverPid}`);
    }

    if (reloaderPid) {
      console.log("Killing reloader process...");
      exec(`taskkill /F /PID ${reloaderPid}`);
    }

    console.log("Killing uvicorn process...");
    if (!server.kill()) {
      console.error("Failed to kill uvicorn process.");
    }
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

declare global {
  interface Window {
    python: {
      submitFilePath: (path: string) => Promise<unknown>;
      readFile: (path: string) => Promise<string>;
      setFileSettings: (
        hasHeader: boolean,
        separator: string,
        selectedColumns: number[],
      ) => void;
      setAlgorithmSettings: (
        autoChooseClusters: boolean,
        maxClusters: number,
        excludedWords: string[],
        seed: number,
      ) => void;
    };
  }
}

const isDev = () => {
  return process.env["WEBPACK_SERVE"] === "true";
};
