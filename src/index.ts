import { app, BrowserWindow, ipcMain } from "electron";
import { ChildProcess, spawn } from "child_process";
import squirrel from "electron-squirrel-startup";
import fs from "fs";
import path from "path";
import {
  FileSettings,
  AutoAlgorithmSettings,
  ManualAlgorithmSettings,
} from "./models";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (squirrel) {
  app.quit();
}

const isDev = () => {
  return process.env["WEBPACK_SERVE"] === "true";
};

let rootDir = path.join(__dirname, "..", "..");
if (!isDev()) {
  rootDir = path.join(__dirname, "..", "..", "..", "..");
}
const venvPath = path.join(rootDir, ".venv");
let script: ChildProcess | undefined;
const progressMessages: string[] = [];
const completedMessages: string[] = [];

const checkPythonEnvironment = () => {
  if (!fs.existsSync(venvPath)) {
    console.error(
      "Python environment not set up. Please run the setup script first.",
    );
    // TODO: Show this to the user
    app.quit();
  }
};

const parseProgressMessage = (data: string) => {
  // Extract the progress message from the log message, e.g. "...STARTED: Reading input file..."
  const progressRegex = /STARTED: [a-zA-z\s]*[a-zA-Z]/;
  const match = data.match(progressRegex);
  if (match) {
    return match[0].replace("STARTED: ", "");
  }
  console.log(data);
  return undefined;
};

const parseCompletedMessage = (data: string) => {
  // Extract the progress message from the log message, e.g. "...COMPLETED: Reading input file..."
  const completedRegex = /COMPLETED: [a-zA-z\s]*[a-zA-Z]/;
  const match = data.match(completedRegex);
  if (match) {
    return match[0].replace("COMPLETED: ", "");
  }
  console.log(data);
  return undefined;
};

const startScript = async (
  fileSettings: FileSettings,
  algorithmSettings: AutoAlgorithmSettings | ManualAlgorithmSettings,
) => {
  let pythonPath: string;
  if (process.platform === "win32") {
    pythonPath = path.join(venvPath, "Scripts", "python.exe");
  } else {
    pythonPath = path.join(venvPath, "bin", "python");
  }
  const pythonArguments: string[] = [
    "-u",
    path.join(rootDir, "python", "main.py"),
    fileSettings.path,
    "--delimiter",
    fileSettings.delimiter,
    "--excluded_words",
    algorithmSettings.excludedWords.join(","),
    "--language_model",
    algorithmSettings.advancedOptions.languageModel,
    "--nearest_neighbors",
    algorithmSettings.advancedOptions.nearestNeighbors.toString(),
    "--z_score_threshold",
    algorithmSettings.advancedOptions.zScoreThreshold.toString(),
    "--seed",
    algorithmSettings.seed.toString(),
    "--merge_threshold",
    algorithmSettings.advancedOptions.similarityThreshold.toString(),
  ];
  if (isDev()) {
    pythonArguments[1] = path.join(rootDir, "src", "python", "main.py");
  }
  if (fileSettings.hasHeader) {
    pythonArguments.push("--has_headers");
  }
  pythonArguments.push("--selected_columns");
  // This will be moved
  const selectedColumns = fileSettings.selectedColumns
    .map((selected, index) => (selected ? index : undefined))
    .filter((index) => index !== undefined) as number[];
  selectedColumns.forEach((index) => {
    pythonArguments.push(index.toString());
  });
  if (algorithmSettings.autoClusterCount) {
    pythonArguments.push("--automatic_k");
    pythonArguments.push("--max_clusters");
    pythonArguments.push(
      (algorithmSettings as AutoAlgorithmSettings).maxClusters.toString(),
    );
  } else {
    pythonArguments.push("--cluster_count");
    pythonArguments.push(
      (algorithmSettings as ManualAlgorithmSettings).clusterCount.toString(),
    );
  }
  console.log(`Starting script with arguments: ${pythonArguments}`);
  return new Promise<void>((resolve, reject) => {
    script = spawn(pythonPath, pythonArguments, {
      cwd: rootDir,
    });
    script.on("error", (error) => {
      console.error(`Error: ${error.message}`);
      reject(error);
    });
    resolve(); // temporary
    script.stderr?.on("data", (data) => {
      if (data.includes("STARTED: ")) {
        const progressMessage = parseProgressMessage(data.toString());
        if (!progressMessage) {
          console.log("Progress message parsing failed.");
          return;
        }
        progressMessages.push(progressMessage);
      }
      if (data.includes("COMPLETED: ")) {
        const completedMessage = parseCompletedMessage(data.toString());
        if (!completedMessage) {
          console.log("Completed message parsing failed.");
          return;
        }
        completedMessages.push(completedMessage);
      }
      console.log(`stderr: ${data}`);
    });
    script.stdout?.on("data", (data) => {
      console.log(`stdout: ${data}`);
    });
  });
};

const createWindow = () => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 768,
    width: 1024,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  return mainWindow;
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", async () => {
  checkPythonEnvironment();
  // await startServer();
  console.log("App is ready.");

  createWindow();

  // IPC communication between main and renderer processes

  ipcMain.handle("python:readFile", async (event, path: string) => {
    return new Promise<string>((resolve, reject) => {
      fs.readFile(path, "utf-8", (err, data) => {
        if (err) {
          console.error(err);
          reject(err);
        }
        resolve(data);
      });
    });
  });

  ipcMain.handle(
    "python:startClustering",
    (
      event,
      fileSettings: FileSettings,
      algorithmSettings: ManualAlgorithmSettings | AutoAlgorithmSettings,
    ) => {
      startScript(fileSettings, algorithmSettings);
    },
  );

  ipcMain.handle("python:pollClusterProgress", () => {
    const currentTask = progressMessages[progressMessages.length - 1];
    const progress = {
      currentTask: currentTask,
      completedMessages: completedMessages,
    };
    return progress;
  });
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

declare global {
  interface Window {
    python: {
      readFile: (path: string) => Promise<string>;
      startClustering: (
        fileSettings: FileSettings,
        AlgorithmSettings: AutoAlgorithmSettings | ManualAlgorithmSettings,
      ) => Promise<void>;
      pollClusterProgress: () => Promise<{
        currentTask: string;
        completedMessages: string[];
      }>;
    };
  }
}
